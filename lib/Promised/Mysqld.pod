=head1 NAME

Promised::Mysqld - MySQL server wrapper for development and testing

=head1 SYNOPSIS

  use Promised::Mysqld;
  $mysqld = Promised::Mysqld->new;
  $mysqld->start->then (sub {
    ...;
    return $mysqld->stop;
  })->then (sub {
    warn "done";
  });

=head1 DESCRIPTION

The C<Promised::Mysqld> class provides a L<Promise>-aware interface to
start and stop C<mysqld> process, for the purpose of development and
testing.  It creates a temporary database and start the MySQL server
using it.

=head1 METHODS

Following methods are available:

=over 4

=item $mysqld = Promised::Mysqld->new

Create a new instance.

=item $promise = $mysqld->start

Return a L<Promise>, which is resolved after the MySQL server is ready
to accept queries.  The promise is rejected if the server failed to
start.

=item $promise = $mysqld->stop

Return a L<Promise>, which is resolved after the MySQL server is
shutdown.

This method must be invoked after the C<start> method is invoked.  It
can be invoked even when the C<start>'s promise is rejected.

=item $mysqld->set_mysqld_and_mysql_install_db ($mysqld, $mysql_install_db)

Set the paths to the C<mysqld> and C<mysql_install_db> commands.

This method must be invoked before the C<start> method is invoked.  If
not invoked, directories in C<PATH> and well-known locations are used
to find these commands.

=item $mysqld->set_db_dir ($path)

Set the path to the directory used to create files for the MySQL
server.  It can be an existing database directory, an empty directory,
or a path to directory that does not exist yet.  Please note that any
existing file in the directory, especially C<etc/my.cnf>, can be
modified by the module and/or C<mysqld>.

This method must be invoked before the C<start> method is invoked.  If
not invoked, a temporary directory is created and used.  The temporary
directory is removed after the MySQL server is shutdown, unless the
C<PROMISED_MYSQLD_DEBUG> environment variable is set to a true value.

=item $hashref = $mysqld->my_cnf

Return a hash reference, which is used to generate the C<my.cnf>
configuration file for the C<mysqld> process.

The hash can contain zero or more name/value character string pairs,
which is used as name/value pairs in the generated C<my.cnf> file.  If
the value is the empty string or C<undef>, only the name is inserted
in the file.

Some of name/value pairs are set by default (or to be set implicitly
when the C<start> method is invoked).  Unless otherwise specified, the
C<mysqld> process is configured such that any file read or written
(including database files) is located within the directory specified
by the C<db_dir> method and that no TCP/IP port is listen but a Unix
domain socket is created in the C<db_dir>'s directory.

If you want C<mysqld> to listen a TCP port, following lines should be
executed before the C<start> method invocation:

  $mysqld->my_cnf->{port} = $port;
  delete $mysqld->my_cnf->{'skip-networking'};

=item $time = $mysqld->start_timeout

=item $mysqld->start_timeout ($time)

Get or set the timeout for the C<start>, i.e. the maximum time
interval between the invocation of the C<mysqld> command and when the
server becomes ready to accept queries.

This method must be invoked before the C<start> method is invoked.

=item $hashref = $mysqld->get_dsn_options

Return a hash reference, which contains name/value pairs that can be
use to construct the options component of the DSN string for the
L<DBI> (L<DBD::mysql>) module used to connect to the database.  Note
that the C<dbname> option is set to C<mysql>, which is the only
database in the server when the server is created with no initial
data.

This method must be invoked after the C<start>'s promise is resolved.

=item $dsn = $mysqld->get_dsn_string (NAME => VALUE, ...)

Return a DSN string which can be use to connect to the database using
the L<DBI> (L<DBD::mysql>) module.  By default the C<dbname> option is
set to C<mysql>, which is the only database in the server when the
server is created with no initial data.  This can be replaced by
specifying the C<dbname> named argument to the method.  Likewise,
other options such as C<user> and C<password> can also be specified as
named arguments.

This method must be invoked after the C<start>'s promise is resolved.

=item $mysqld->client_connect (NAME => VALUE, ...)->then (sub { $client = shift })

Return a L<Promise>, which is resolved with an
L<AnyEvent::MySQL::Client> object which is connected to the database.
By default it is connected to the C<mysql> database, which is the only
database in the server when the server is created with no initial
data.  This can be changed by specifying the C<dbname> named argument
to the method.

This method must be invoked after the C<start>'s promise is resolved.
The C<disconnect> method of the client object does not have to be
explicitly invoked, as the C<stop> method will invoke the method
before shutting down the MySQL server.

This method requires L<AnyEvent::MySQL::Client> module.

=item $promise = $mysqld->create_db_and_execute_sqls ($dbname, [$sql, $sql, ...])

Return a L<Promise>, which is resolved after SQL statements specified
by the arguments are executed on the database.  The promise is
rejected if the execution is failed.

The first argument must be the database name.  If there is no database
with the specified name, a new database is created (by an SQL C<CREATE
DATABASE> statement).

The second argument must be an array reference of zero or more
strings, which are sent to the MySQL server as SQL statements, in
order.

This method must be invoked after the C<start>'s promise is resolved.

This method requires L<AnyEvent::MySQL::Client> module.

=back

During the server is running, signal handlers for C<SIGINT>,
C<SIGTERM>, and C<SIGQUIT> are installed such that these signal will
terminate the server (and the current script).  If the script wants to
handle signal in other ways, the handling should be specified using
the L<Promised::Command::Signals> API from
<https://github.com/wakaba/perl-promised-command> to avoid
confliction.

=head1 DEPENDENCY

This module requires Perl 5.12 or later.

The module requires L<Promise>
<https://github.com/wakaba/perl-promise>, L<Promised::Command>
<https://github.com/wakaba/perl-promised-command>, L<Promised::File>
<https://github.com/wakaba/perl-promised-file>, and L<AnyEvent>.

As described in the earlier section, some methods require
L<AnyEvent::MySQL::Client>
<https://github.com/wakaba/perl-anyevent-mysql-client>.

It also requires MySQL version 5 (C<mysqld> and C<mysql_install_db>
commands).

=head1 AUTHOR

Wakaba <wakaba@uikawiki.org>.

=head1 ACKNOWLEDGEMENTS

This module is inspired by L<Test::mysqld>
<https://github.com/kazuho/p5-test-mysqld> and
L<Test::MySQL::CreateDatabase>
<https://github.com/wakaba/perl-rdb-utils/tree/master/lib/Test/MySQL>.

=head1 LICENSE

Copyright 2015 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
